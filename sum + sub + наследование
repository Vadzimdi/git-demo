class Vector:
    def __init__(self, *args):
        self.vec = list(args)

    def __add__(self, other):
        if len(self.vec) != len(other.vec):
            raise TypeError('размерности векторов не совпадают')
        else:
            if isinstance(self.vec, Vector): 
                if isinstance(other.vec, Vector):
                    return Vector(*[self.vec[i]+other.vec[i] for i in range(len(self.vec))])
            else:
                a = all(type(x) is int for x in self.vec)
                b = all(type(x) is int for x in other.vec)
                if a and b:
                    return VectorInt(*[self.vec[i]+other.vec[i] for i in range(len(self.vec))])
                else:
                    return Vector(*[self.vec[i]+other.vec[i] for i in range(len(self.vec))])

    def __sub__(self, other):
        if len(self.vec) != len(other.vec):
            raise TypeError('размерности векторов не совпадают')
        else:
            if isinstance(self, Vector) and isinstance(other, Vector):
                return Vector(*[self.vec[i] - other.vec[i] for i in range(len(self.vec))])
            else:
                if all(type(x) is int for x in self.vec) or all(type(x) is int for x in other.vec):
                    return VectorInt(*[self.vec[i] - other.vec[i] for i in range(len(self.vec))])
                else:
                    return Vector(*[self.vec[i] - other.vec[i] for i in range(len(self.vec))])

    def get_coords(self):
        return tuple(self.vec)
    
    
class VectorInt(Vector):
    def __init__(self, *args):
        if all(type(x) is int for x in args):
            super().__init__(*args)
        else:
            raise ValueError('координаты должны быть целыми числами')  
            
            
v1 = Vector(1, 2, 3)
v2 = Vector(3, 4, 5)
assert (v1 + v2).get_coords() == (4, 6, 8), "операция сложения дала неверные значения (или некорректно работает метод get_coords)"
assert (v1 - v2).get_coords() == (-2, -2, -2), "операция вычитания дала неверные значения (или некорректно работает метод get_coords)"
v = VectorInt(1, 2, 3, 4)
assert isinstance(v, Vector), "класс VectorInt должен наследоваться от класса Vector"
try:
    v = VectorInt(1, 2, 3.4, 4)
except ValueError:
    assert True
else:
    assert False, "не сгенерировалось исключение ValueError для команды v = VectorInt(1, 2, 3.4, 4)"
    
v1 = VectorInt(1, 2, 3, 4)
v2 = VectorInt(4, 2, 3, 4)
v3 = Vector(1.0, 2, 3, 4)
v = v1+v2
assert type(v) == VectorInt, "при сложении вектором с целочисленными координатами должен формироваться объект класса VectorInt"
v = v1+v3
assert type(v) == Vector, "при сложении вектором с вещественными координатами должен формироваться объект класса Vector"            
