class TreeObj:
    def __init__(self, indx, value=None):
        self.indx = indx
        self.value = value
        self.__left = None
        self.__right = None


    @property
    def left(self):
        return self.__left

    @left.setter
    def left(self, obj):
        self.__left = obj

    @property
    def right(self):
        return self.__right

    @right.setter
    def right(self, obj):
        self.__right = obj


class DecisionTree:
    @classmethod
    def predict(cls, root, x):
        s = root
        while s != None:
            if x[s.indx]:
                s = s.left
                if s.left == None and s.right == None:
                    return s.value
            else:
                s = s.right
                if s.left == None and s.right == None:
                    return s.value


    @classmethod
    def add_obj(cls, obj, node=None, left=True):
        if node == None:
            return obj
        else:
            if left:
                node.left = obj
                return obj
            elif left == False:
                node.right = obj
                return obj

root = DecisionTree.add_obj(TreeObj(0))
v_11 = DecisionTree.add_obj(TreeObj(1), root)
v_12 = DecisionTree.add_obj(TreeObj(2), root, False)
DecisionTree.add_obj(TreeObj(-1, "программист"), v_11)
DecisionTree.add_obj(TreeObj(-1, "кодер"), v_11, False)
DecisionTree.add_obj(TreeObj(-1, "посмотрим"), v_12)
DecisionTree.add_obj(TreeObj(-1, "нет"), v_12, False)
print(DecisionTree.predict(root, [1, 1, 0]))
print(DecisionTree.predict(root, [0, 1, 0]))
print(DecisionTree.predict(root, [0, 1, 1]))
