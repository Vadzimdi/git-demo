import time


class GeyserClassic:
    MAX_DATE_FILTER = 100

    def __init__(self):
        self.slot1 = None
        self.slot2 = None
        self.slot3 = None

    def add_filter(self, slot_num, filter):
        if slot_num == 1 and isinstance(filter, Mechanical):
            if self.slot1 == None:
                self.slot1 = filter
        elif slot_num == 2 and isinstance(filter, Aragon):
            if self.slot2 == None:
                self.slot2 = filter
        elif slot_num == 3 and isinstance(filter, Calcium):
            if self.slot3 == None:
                self.slot3 = filter

    def remove_filter(self, slot_num):
        if slot_num == 1:
            self.slot1 = None
        elif slot_num == 2:
            self.slot2 = None
        elif slot_num == 3:
            self.slot3 = None

    def get_filters(self):
        return (self.slot1, self.slot2, self.slot3)

    def water_on(self):
        if self.slot1 == None or self.slot2 == None or self.slot3 == None:
            return False
        if 0 <= (time.time() - self.slot1.date) <= GeyserClassic.MAX_DATE_FILTER:
            if 0 <= (time.time() - self.slot2.date) <= GeyserClassic.MAX_DATE_FILTER:
                if 0 <= (time.time() - self.slot3.date) <= GeyserClassic.MAX_DATE_FILTER:
                    return True
        return False


class Mechanical:
    def __init__(self, date):
        self.date = date

    def __setattr__(self, key, value):
        if key == 'date' and key in self.__dict__.keys():
            return
        else:
            object.__setattr__(self, key, value)


class Aragon:
    def __init__(self, date):
        self.date = date

    def __setattr__(self, key, value):
        if key == 'date' and key in self.__dict__.keys():
            return
        else:
            object.__setattr__(self, key, value)


class Calcium:
    def __init__(self, date):
        self.date = date

    def __setattr__(self, key, value):
        if key == 'date' and key in self.__dict__.keys():
            return
        else:
            object.__setattr__(self, key, value)
