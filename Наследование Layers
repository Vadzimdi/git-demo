class Layer:
    def __init__(self, name = 'Layer'):
        self.name = name
        self.next_layer = None

    def __call__(self, s, *args, **kwargs):
        self.next_layer = s
        return s
class Input(Layer):
    def __init__(self, inputs):
        super().__init__()
        self.inputs = inputs
        self.name = 'Input'
class Dense(Layer):
    def __init__(self, inputs, outputs, activation):
        super().__init__()
        self.inputs = inputs
        self.outputs = outputs
        self.activation = activation


class NetworkIterator:
    def __init__(self, s):
        self.s = s
        
    def __iter__(self):
        sloy = self.s
        while sloy:
            yield sloy
            sloy = sloy.next_layer

   
network = Input(128)
layer = network(Dense(network.inputs, 1024, 'linear'))
layer = layer(Dense(layer.inputs, 10, 'softmax'))

for x in NetworkIterator(network):
    print(x.name)
